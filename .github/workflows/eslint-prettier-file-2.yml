name: ESLint and Prettier for Microservices

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - 'movie-review-app'
          - 'chat-app'
          - 'lambda/save-picture'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # this fetches all history for all branches and tags.

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'  # You can adjust this to your project's Node.js version

    - name: Get list of changed files
      id: getfile
      uses: actions/github-script@v5
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            per_page: 100,
          });
          const jsFiles = files
            .filter(f => f.filename.endsWith('.js') && f.status !== 'removed')
            .map(f => f.filename);
          return jsFiles;
        result-encoding: string

    - name: Checkout PR's branch for committing
      if: steps.getfile.outputs.result != ''
      run: |
        echo "Changed Files: ${{ steps.getfile.outputs.result }}"
        git fetch origin +refs/pull/${{ github.event.pull_request.number }}/merge
        git checkout -B ${{ github.head_ref }} FETCH_HEAD

    - name: Run ESLint and Prettier on changed files
      if: steps.getfile.outputs.result != ''
      run: |
        echo "Files to check: ${{ steps.getfile.outputs.result }}"
        for file in ${{ fromJSON(steps.getfile.outputs.result) }}; do
          echo "ESLint proposed changes for $file:"
          npx eslint $file --format=compact
          echo "Prettier proposed changes for $file:"
          npx prettier $file --check
          npx eslint $file --fix
          npx prettier $file --write
        done

    - name: Commit changes
      if: steps.getfile.outputs.result != ''
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git commit -m "fix: ESLint and Prettier issues" || echo "No changes to commit"
        git push origin HEAD:${{ github.head_ref }}

    - name: Pull latest changes
      if: github.event.pull_request.head.repo.full_name == github.repository
      run: git pull origin ${{ github.head_ref }}
